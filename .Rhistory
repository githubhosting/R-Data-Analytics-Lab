library(dplyr)  # For functions bind_rows, select, mutate etc.
# Create a data frame (in global scope) to store student information
student_data <- data.frame(
USN = character(0),
Name = character(0),
Math_Score = numeric(0),
Science_Score = numeric(0),
History_Score = numeric(0),
Attendance = numeric(0)
)
print(student_data)
# Function to add new student information (row) to data frame
add_student <- function(usn, name, math_score, science_score, history_score, attendance) {
# Create a new row as a data frame
new_student <- data.frame(
USN = usn,
Name = name,
Math_Score = math_score,
Science_Score = science_score,
History_Score = history_score,
Attendance = attendance
)
# Add the new row to the data frame
student_data <<- bind_rows(student_data, new_student)
cat("Student information added.\n")
}
# Function to calculate average scores
calculate_average_scores <- function() {
avg_scores <- student_data %>%
mutate(Average_Score = (Math_Score + Science_Score + History_Score) / 3) %>%
select(USN, Name, Average_Score, Attendance)
return(avg_scores)
}
# Function to identify students with low attendance
identify_low_attendance <- function(threshold) {
low_attendance <- student_data %>%
filter(Attendance < threshold) %>%
select(USN, Name, Attendance)
return(low_attendance)
}
# Function to generate a performance report
generate_report <- function() {
if (nrow(student_data) == 0) {
cat("No student data available for generating a report.\n")
return()
}
avg_scores <- calculate_average_scores()
print(avg_scores)
low_attendance <- identify_low_attendance(70)
print(low_attendance)
}
# Main program
while (TRUE) {
cat("\n1. Add Student\n2. Generate Report\n3. Exit\n")
choice <- as.integer(readline("Enter your choice: "))
if (choice == 1) {
usn <- readline("Enter USN: ")
name <- readline("Enter student name: ")
math_score <- as.numeric(readline("Enter math score: "))
science_score <- as.numeric(readline("Enter science score: "))
history_score <- as.numeric(readline("Enter history score: "))
attendance <- as.numeric(readline("Enter attendance percentage: "))
if (is.na(math_score) || is.na(science_score) || is.na(history_score) || is.na(attendance)) {
cat("Invalid input. Please enter valid numbers for scores and attendance.\n")
next  # Restart the loop
}
add_student(usn, name, math_score, science_score, history_score, attendance)
} else if (choice == 2) {
generate_report()
} else if (choice == 3) {
cat("Exiting the program. Goodbye!\n")
break
} else {
cat("Invalid choice. Please try again.\n")
}
}
days_overdue <- as.integer(readline("Enter the number of days overdue: "))
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0
} else if (days_overdue <= 15) {
fine_per_day <- 2
fine <- (days_overdue - 7) * fine_per_day
} else if (days_overdue <= 30) {
fine_per_day <- 3
fine <- 8 * 2 + (days_overdue - 15) * fine_per_day
} else if (days_overdue <= 50) {
fine_per_day <- 5
fine <- 15 * 3 + 8 * 2 + (days_overdue - 30) * fine_per_day
} else {
fine <- 50
cat("Fine exceeds the maximum. Please contact the library.\n")
}
return(fine)
}
fine_amount <- calculate_fine(days_overdue)
if (fine_amount == 0) {
cat("No fine. Thank you for returning the book on time!!!\n")
} else {
if (days_overdue >= 50) {
cat("Fine exceeds the maximum. Please contact the library.\n")
} else {
cat("Please pay the fine within the specified period.\n")
cat("Fine Amount:", fine_amount, "\n")
}
}
days_overdue <- as.integer(readline("Enter the number of days overdue: "))
fine_amount <- calculate_fine(days_overdue)
if (fine_amount == 0) {
cat("No fine. Thank you for returning the book on time!!!\n")
} else {
if (days_overdue >= 50) {
cat("Fine exceeds the maximum. Please contact the library.\n")
} else {
cat("Please pay the fine within the specified period.\n")
cat("Fine Amount:", fine_amount, "\n")
}
}
library(dplyr)  # For functions bind_rows, select, mutate etc.
# Create a data frame (in global scope) to store student information
student_data <- data.frame(
USN = character(0),
Name = character(0),
Math_Score = numeric(0),
Science_Score = numeric(0),
History_Score = numeric(0),
Attendance = numeric(0)
)
print(student_data)
# Function to add new student information (row) to data frame
add_student <- function(usn, name, math_score, science_score, history_score, attendance) {
# Create a new row as a data frame
new_student <- data.frame(
USN = usn,
Name = name,
Math_Score = math_score,
Science_Score = science_score,
History_Score = history_score,
Attendance = attendance
)
# Add the new row to the data frame
student_data <<- bind_rows(student_data, new_student)
cat("Student information added.\n")
}
# Function to calculate average scores
calculate_average_scores <- function() {
# Calculate the average score
student_data$Average_Score <- (student_data$Math_Score + student_data$Science_Score + student_data$History_Score) / 3
# Select the required columns
avg_scores <- student_data[c("USN", "Name", "Average_Score", "Attendance")]
return(avg_scores)
}
# Function to identify students with low attendance
identify_low_attendance <- function(threshold) {
low_attendance <- student_data %>%
filter(Attendance < threshold) %>%
select(USN, Name, Attendance)
return(low_attendance)
}
# Function to generate a performance report
generate_report <- function() {
if (nrow(student_data) == 0) {
cat("No student data available for generating a report.\n")
return()
}
avg_scores <- calculate_average_scores()
print(avg_scores)
low_attendance <- identify_low_attendance(70)
print(low_attendance)
}
# Main program
while (TRUE) {
cat("\n1. Add Student\n2. Generate Report\n3. Exit\n")
choice <- as.integer(readline("Enter your choice: "))
if (choice == 1) {
usn <- readline("Enter USN: ")
name <- readline("Enter student name: ")
math_score <- as.numeric(readline("Enter math score: "))
science_score <- as.numeric(readline("Enter science score: "))
history_score <- as.numeric(readline("Enter history score: "))
attendance <- as.numeric(readline("Enter attendance percentage: "))
if (is.na(math_score) || is.na(science_score) || is.na(history_score) || is.na(attendance)) {
cat("Invalid input. Please enter valid numbers for scores and attendance.\n")
next  # Restart the loop
}
add_student(usn, name, math_score, science_score, history_score, attendance)
} else if (choice == 2) {
generate_report()
} else if (choice == 3) {
cat("Exiting the program. Goodbye!\n")
break
} else {
cat("Invalid choice. Please try again.\n")
}
}
# Initialize arrays for inventory items and quantities
inventory_items <- character(0)
inventory_qty <- numeric(0)
# Function to add a new item with quantity
add_item <- function(item, qty) {
inventory_items <<- c(inventory_items, item)
inventory_qty <<- c(inventory_qty, qty)
cat("Item added to inventory.\n")
}
# Function to update quantity of an existing item
update_qty <- function(item, new_qty) {
if (item %in% inventory_items) {
item_index <- which(inventory_items == item)
inventory_qty[item_index] <<- new_qty
cat("Quantity updated.\n")
} else {
cat("Item not found in inventory.\n")
}
}
# Function to display inventory
display_inventory <- function() {
cat("Inventory Items and Quantities:\n")
for (i in 1:length(inventory_items)) {
cat(sprintf("%s: %d\n", inventory_items[i], inventory_qty[i]))
}
}
# Function to remove item from inventory
remove_item <- function(item) {
if (item %in% inventory_items) {
item_index <- which(inventory_items == item)
inventory_items <<- inventory_items[inventory_items != item]
inventory_qty <<- inventory_qty[-c(item_index)]
cat("Item removed from inventory.\n")
} else {
cat("Item not found in inventory.\n")
}
}
# Main program
while (TRUE) {
cat("\n1. Add Item\n2. Update Quantity\n3. Display Inventory\n4. Remove Item\n5. Exit\n")
choice <- as.integer(readline("Enter choice: "))
if (choice == 1) {
item <- readline("Enter item name: ")
qty <- as.integer(readline("Enter quantity: "))
add_item(item, qty)
} else if (choice == 2) {
item <- readline("Enter item name: ")
new_qty <- as.integer(readline("Enter new quantity: "))
update_qty(item, new_qty)
} else if (choice == 3) {
display_inventory()
} else if (choice == 4) {
item <- readline("Enter item name: ")
remove_item(item)
} else if (choice == 5) {
cat("Exiting the program. Goodbye!\n")
break
} else {
cat("Invalid choice. Please try again.\n")
}
}
library(dplyr)  # For functions bind_rows, select, mutate etc.
# Create a data frame (in global scope) to store student information
student_data <- data.frame(
USN = character(0),
Name = character(0),
Math_Score = numeric(0),
Science_Score = numeric(0),
History_Score = numeric(0),
Attendance = numeric(0)
)
print(student_data)
# The original calculate_fine function
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0
} else if (days_overdue <= 15) {
fine_per_day <- 2
fine <- (days_overdue - 7) * fine_per_day
} else if (days_overdue <= 30) {
fine_per_day <- 3
fine <- 8 * 2 + (days_overdue - 15) * fine_per_day
} else if (days_overdue <= 50) {
fine_per_day <- 5
fine <- 15 * 3 + 8 * 2 + (days_overdue - 30) * fine_per_day
} else {
fine <- 50  # Set a cap of 50 if days_overdue exceeds 50.
}
return(fine)
}
# Function to calculate fines for a matrix of students and courses
calculate_fine_matrix <- function(overdue_matrix) {
fine_matrix <- matrix(0, nrow = nrow(overdue_matrix), ncol = ncol(overdue_matrix))
for (i in 1:nrow(overdue_matrix)) {
for (j in 1:ncol(overdue_matrix)) {
days_overdue <- overdue_matrix[i, j]
fine_matrix[i, j] <- calculate_fine(days_overdue)
}
}
return(fine_matrix)
}
# Sample data for 100 students and 5 courses (randomly generated for demonstration)
set.seed(123) # for reproducibility
overdue_matrix <- matrix(sample(0:60, 100 * 5, replace = TRUE), nrow = 100, ncol = 5)
# Calculate fines
fines <- calculate_fine_matrix(overdue_matrix)
# Output the fines for each student
for (i in 1:nrow(fines)) {
cat("Student", i, "Total Fine:", sum(fines[i, ]), "\n")
# The original calculate_fine function
calculate_fine <- function(days_overdue) {
if (days_overdue <= 7) {
fine <- 0
} else if (days_overdue <= 15) {
fine_per_day <- 2
fine <- (days_overdue - 7) * fine_per_day
} else if (days_overdue <= 30) {
fine_per_day <- 3
fine <- 8 * 2 + (days_overdue - 15) * fine_per_day
} else if (days_overdue <= 50) {
fine_per_day <- 5
fine <- 15 * 3 + 8 * 2 + (days_overdue - 30) * fine_per_day
} else {
fine <- 50  # Set a cap of 50 if days_overdue exceeds 50.
}
return(fine)
}
# Function to calculate fines for a matrix of students and courses
calculate_fine_matrix <- function(overdue_matrix) {
fine_matrix <- matrix(0, nrow = nrow(overdue_matrix), ncol = ncol(overdue_matrix))
for (i in 1:nrow(overdue_matrix)) {
for (j in 1:ncol(overdue_matrix)) {
days_overdue <- overdue_matrix[i, j]
fine_matrix[i, j] <- calculate_fine(days_overdue)
}
}
return(fine_matrix)
}
# Sample data for 100 students and 5 courses (randomly generated for demonstration)
set.seed(123) # for reproducibility
overdue_matrix <- matrix(sample(0:60, 100 * 5, replace = TRUE), nrow = 100, ncol = 5)
# Calculate fines
fines <- calculate_fine_matrix(overdue_matrix)
# Output the fines for each student
for (i in 1:nrow(fines)) {
cat("Student", i, "Total Fine:", sum(fines[i, ]), "\n")
# Output the fines for each student
for (i in 1:nrow(fines)) {
cat("Student", i, "Total Fine:", sum(fines[i, ]), "\n")
}
overdue_matrix
fines
fines
fines
fines
# Calculate fines
fines <- calculate_fine_matrix(overdue_matrix)
fines
print(fines)
print(fines)
# Initialize arrays for inventory items and quantities
inventory_items <- character(0)
inventory_qty <- numeric(0)
# Function to add a new item with quantity
add_item <- function(item, qty) {
inventory_items <<- c(inventory_items, item)
inventory_qty <<- c(inventory_qty, qty)
cat("Item added to inventory.\n")
}
# Function to update quantity of an existing item
update_qty <- function(item, new_qty) {
if (item %in% inventory_items) {
item_index <- which(inventory_items == item)
inventory_qty[item_index] <<- new_qty
cat("Quantity updated.\n")
} else {
cat("Item not found in inventory.\n")
}
}
# Function to display inventory
display_inventory <- function() {
cat("Inventory Items and Quantities:\n")
for (i in 1:length(inventory_items)) {
cat(sprintf("%s: %d\n", inventory_items[i], inventory_qty[i]))
}
}
# Function to remove item from inventory
remove_item <- function(item) {
if (item %in% inventory_items) {
item_index <- which(inventory_items == item)
inventory_items <<- inventory_items[inventory_items != item]
inventory_qty <<- inventory_qty[-c(item_index)]
cat("Item removed from inventory.\n")
} else {
cat("Item not found in inventory.\n")
}
}
# Main program
while (TRUE) {
cat("\n1. Add Item\n2. Update Quantity\n3. Display Inventory\n4. Remove Item\n5. Exit\n")
choice <- as.integer(readline("Enter choice: "))
if (choice == 1) {
item <- readline("Enter item name: ")
qty <- as.integer(readline("Enter quantity: "))
add_item(item, qty)
} else if (choice == 2) {
item <- readline("Enter item name: ")
new_qty <- as.integer(readline("Enter new quantity: "))
update_qty(item, new_qty)
} else if (choice == 3) {
display_inventory()
} else if (choice == 4) {
item <- readline("Enter item name: ")
remove_item(item)
} else if (choice == 5) {
cat("Exiting the program. Goodbye!\n")
break
} else {
cat("Invalid choice. Please try again.\n")
}
}
# Load required libraries
library(forecast)
# Create a data frame with Month and sales columns for 12 months
sales_data <- data.frame(
Month = seq(as.Date("2023-01-01"), as.Date("2023-12-01"), by = "months"),
Sales = c(12000, 15000, 18000, 16000, 20000, 22000, 25000, 28000, 30000, 32000, 35000, 38000)
)
print(sales_data)
print(sales_data$Month)
print(sales_data$Sales)
sales_ts <- ts(sales_data$Sales, frequency = 12)
print(sales_ts)
# Task 1: Matrix Creation
matrix_A <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9),
nrow = 3, ncol = 3, byrow = TRUE)
matrix_B <- matrix(c(9, 8, 7, 6, 5, 4, 3, 2, 1),
nrow = 3, ncol = 3, byrow = TRUE)
sum_matrix <- matrix_A + matrix_B
scaled_matrix <- matrix_A * 2
# Task 3: Matrix Operations
transposed_A <- t(matrix_A)
product_matrix <- matrix_A %*% matrix_B
# Task 4: Matrix Statistics
sum_matrix_A <- sum(matrix_A)
mean_matrix_B <- mean(matrix_B)
sd_matrix_B <- sd(matrix_B)
# Task 5: Visualization
library(ggplot2)
library(reshape2)
install.packages("reshape2")
install.packages("ggplot2")
install.packages("reshape2")
# Task 5: Visualization
library(ggplot2)
library(reshape2)
# Create a heatmap of matrix_A
heatmap_data <- melt(matrix_A)
heatmap_data <- melt(matrix_A)
# Create a heatmap of matrix_A
heatmap_data <- melt(matrix_A)
print(matrix_A)
print(matrix_B)
# Task 2: Matrix Manipulation
sum_matrix <- matrix_A + matrix_B
print(sum_matrix)
scaled_matrix <- matrix_A * 2
print(scaled_matrix)
# Task 3: Matrix Operations
transposed_A <- t(matrix_A)
print(transposed_A)
product_matrix <- matrix_A * matrix_B
print(product_matrix)
# Create a heatmap of matrix_A
heatmap_data <- melt(matrix_A)
print(mul_matrix)
#multplication
mul_matrix <- matrix_A %*% matrix_B
print(mul_matrix)
df <- data.frame(
EMPID= c(101,102,103,104,105),
Name=c("John","peter","bob","Linda","Elizabeth"),
Age=c(25,30,35,40,45),
Salary=c(50000,60000,45000,70000,55000),
Department=c("HR","IT","Finance","Production","QualityControl"))
filtered_data <- filter(df,Age>25)
selected_columns <- select(df, EMPID, Name, Salary)
mutated_data <-mutate(df,Salary_Adjusted=Salary*1.1)
grouped_data <- group_by(df,Department)
summarized_data <-summarize(grouped_data,
Avg_salary=mean(Salary),Max_Age=max(Age))
install.packages("dplyr")
library(dplyr)
filtered_data <- filter(df,Age>25)
selected_columns <- select(df, EMPID, Name, Salary)
mutated_data <-mutate(df,Salary_Adjusted=Salary*1.1)
grouped_data <- group_by(df,Department)
summarized_data <-summarize(grouped_data,
Avg_salary=mean(Salary),Max_Age=max(Age))
arranged_data <- arrange(df,Age,desc(Salary))
df2 <- data.frame(
EMPID =c(103,104,105),
Bonus=c(2000,3000,5000)
)
joined_data <- left_join(df,df2,by="EMPID")
print("Filtered Data:")
print(filtered_data)
print("Selected Columns:")
print(selected_columns)
print("Mutated Data:")
print(mutated_data)
print("Summarized Data:")
print(summarized_data)
print("Arranged Data:")
print(arranged_data)
print("Joined Data:")
print(joined_data)
